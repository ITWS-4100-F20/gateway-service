# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_row import DataRow  # noqa: F401,E501
from swagger_server import util


class ModelSchema(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, model_id: str=None, collection_name: str=None):  # noqa: E501
        """DataSchema - a model defined in Swagger

        :param id: The id of this DataSchema.  # noqa: E501
        :type id: str
        :param name: The name of this DataSchema.  # noqa: E501
        :type name: str
        :param fields: The fields of this DataSchema.  # noqa: E501
        :type fields: DataRow
        """
        self.swagger_types = {
            'model_id': str,
            'collection_name':str
        }

        self.attribute_map = {
            'model_id': 'model_id',
            'collection_name':'collection_name'
        }
        self._model_id = model_id
        self._collection_name = collection_name

    @classmethod
    def from_dict(cls, dikt) -> 'DataSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DataSchema of this DataSchema.  # noqa: E501
        :rtype: DataSchema
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_id(self) -> str:
        """Gets the id of this DataSchema.


        :return: The id of this DataSchema.
        :rtype: str
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id: str):
        """Sets the id of this DataSchema.


        :param id: The id of this DataSchema.
        :type id: str
        """

        self._model_id = model_id

    

    @property
    def collection_name(self) -> str:
        """Gets the name of this DataSchema.


        :return: The name of this DataSchema.
        :rtype: str
        """
        return self._collection_name

    @collection_name.setter
    def collection_name(self, collection_name: str):
        """Sets the name of this DataSchema.


        :param name: The name of this DataSchema.
        :type name: str
        """

        self._collection_name = collection_name