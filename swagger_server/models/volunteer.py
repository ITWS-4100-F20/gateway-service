# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Volunteer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: int=None, name: str=None, fin_dest: str=None, cabin: str=None, vol_method: str=None, processed: bool=None):  # noqa: E501
        """Volunteer - a model defined in Swagger

        :param id: The id of this Volunteer.  # noqa: E501
        :type id: int
        :param name: The name of this Volunteer.  # noqa: E501
        :type name: str
        :param fin_dest: The fin_dest of this Volunteer.  # noqa: E501
        :type fin_dest: str
        :param cabin: The cabin of this Volunteer.  # noqa: E501
        :type cabin: str
        :param vol_method: The vol_method of this Volunteer.  # noqa: E501
        :type vol_method: str
        :param processed: The processed of this Volunteer.  # noqa: E501
        :type processed: bool
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'fin_dest': str,
            'cabin': str,
            'vol_method': str,
            'processed': bool
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'fin_dest': 'fin_dest',
            'cabin': 'cabin',
            'vol_method': 'vol_method',
            'processed': 'processed'
        }
        self._id = id
        self._name = name
        self._fin_dest = fin_dest
        self._cabin = cabin
        self._vol_method = vol_method
        self._processed = processed

    @classmethod
    def from_dict(cls, dikt) -> 'Volunteer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Volunteer of this Volunteer.  # noqa: E501
        :rtype: Volunteer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Volunteer.


        :return: The id of this Volunteer.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Volunteer.


        :param id: The id of this Volunteer.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Volunteer.


        :return: The name of this Volunteer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Volunteer.


        :param name: The name of this Volunteer.
        :type name: str
        """

        self._name = name

    @property
    def fin_dest(self) -> str:
        """Gets the fin_dest of this Volunteer.


        :return: The fin_dest of this Volunteer.
        :rtype: str
        """
        return self._fin_dest

    @fin_dest.setter
    def fin_dest(self, fin_dest: str):
        """Sets the fin_dest of this Volunteer.


        :param fin_dest: The fin_dest of this Volunteer.
        :type fin_dest: str
        """

        self._fin_dest = fin_dest

    @property
    def cabin(self) -> str:
        """Gets the cabin of this Volunteer.


        :return: The cabin of this Volunteer.
        :rtype: str
        """
        return self._cabin

    @cabin.setter
    def cabin(self, cabin: str):
        """Sets the cabin of this Volunteer.


        :param cabin: The cabin of this Volunteer.
        :type cabin: str
        """

        self._cabin = cabin

    @property
    def vol_method(self) -> str:
        """Gets the vol_method of this Volunteer.


        :return: The vol_method of this Volunteer.
        :rtype: str
        """
        return self._vol_method

    @vol_method.setter
    def vol_method(self, vol_method: str):
        """Sets the vol_method of this Volunteer.


        :param vol_method: The vol_method of this Volunteer.
        :type vol_method: str
        """

        self._vol_method = vol_method

    @property
    def processed(self) -> bool:
        """Gets the processed of this Volunteer.


        :return: The processed of this Volunteer.
        :rtype: bool
        """
        return self._processed

    @processed.setter
    def processed(self, processed: bool):
        """Sets the processed of this Volunteer.


        :param processed: The processed of this Volunteer.
        :type processed: bool
        """

        self._processed = processed
