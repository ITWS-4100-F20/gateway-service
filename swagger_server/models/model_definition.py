# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ModelDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, def_name: str=None, data_schema_name: str=None, passenger_target: str=None, comp_target: str=None, ignore_pass: List[str]=None, ignore_comp: List[str]=None):  # noqa: E501
        """ModelDefinition - a model defined in Swagger

        :param def_name: The def_name of this ModelDefinition.  # noqa: E501
        :type def_name: str
        :param data_schema_name: The data_schema_name of this ModelDefinition.  # noqa: E501
        :type data_schema_name: str
        :param passenger_target: The passenger_target of this ModelDefinition.  # noqa: E501
        :type passenger_target: str
        :param comp_target: The comp_target of this ModelDefinition.  # noqa: E501
        :type comp_target: str
        :param ignore_pass: The ignore_pass of this ModelDefinition.  # noqa: E501
        :type ignore_pass: List[str]
        :param ignore_comp: The ignore_comp of this ModelDefinition.  # noqa: E501
        :type ignore_comp: List[str]
        """
        self.swagger_types = {
            'def_name': str,
            'data_schema_name': str,
            'passenger_target': str,
            'comp_target': str,
            'ignore_pass': List[str],
            'ignore_comp': List[str]
        }

        self.attribute_map = {
            'def_name': 'def_name',
            'data_schema_name': 'data_schema_name',
            'passenger_target': 'passenger_target',
            'comp_target': 'comp_target',
            'ignore_pass': 'ignore_pass',
            'ignore_comp': 'ignore_comp'
        }
        self._def_name = def_name
        self._data_schema_name = data_schema_name
        self._passenger_target = passenger_target
        self._comp_target = comp_target
        self._ignore_pass = ignore_pass
        self._ignore_comp = ignore_comp

    @classmethod
    def from_dict(cls, dikt) -> 'ModelDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ModelDefinition of this ModelDefinition.  # noqa: E501
        :rtype: ModelDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def def_name(self) -> str:
        """Gets the def_name of this ModelDefinition.


        :return: The def_name of this ModelDefinition.
        :rtype: str
        """
        return self._def_name

    @def_name.setter
    def def_name(self, def_name: str):
        """Sets the def_name of this ModelDefinition.


        :param def_name: The def_name of this ModelDefinition.
        :type def_name: str
        """

        self._def_name = def_name

    @property
    def data_schema_name(self) -> str:
        """Gets the data_schema_name of this ModelDefinition.


        :return: The data_schema_name of this ModelDefinition.
        :rtype: str
        """
        return self._data_schema_name

    @data_schema_name.setter
    def data_schema_name(self, data_schema_name: str):
        """Sets the data_schema_name of this ModelDefinition.


        :param data_schema_name: The data_schema_name of this ModelDefinition.
        :type data_schema_name: str
        """

        self._data_schema_name = data_schema_name

    @property
    def passenger_target(self) -> str:
        """Gets the passenger_target of this ModelDefinition.


        :return: The passenger_target of this ModelDefinition.
        :rtype: str
        """
        return self._passenger_target

    @passenger_target.setter
    def passenger_target(self, passenger_target: str):
        """Sets the passenger_target of this ModelDefinition.


        :param passenger_target: The passenger_target of this ModelDefinition.
        :type passenger_target: str
        """

        self._passenger_target = passenger_target

    @property
    def comp_target(self) -> str:
        """Gets the comp_target of this ModelDefinition.


        :return: The comp_target of this ModelDefinition.
        :rtype: str
        """
        return self._comp_target

    @comp_target.setter
    def comp_target(self, comp_target: str):
        """Sets the comp_target of this ModelDefinition.


        :param comp_target: The comp_target of this ModelDefinition.
        :type comp_target: str
        """

        self._comp_target = comp_target

    @property
    def ignore_pass(self) -> List[str]:
        """Gets the ignore_pass of this ModelDefinition.


        :return: The ignore_pass of this ModelDefinition.
        :rtype: List[str]
        """
        return self._ignore_pass

    @ignore_pass.setter
    def ignore_pass(self, ignore_pass: List[str]):
        """Sets the ignore_pass of this ModelDefinition.


        :param ignore_pass: The ignore_pass of this ModelDefinition.
        :type ignore_pass: List[str]
        """

        self._ignore_pass = ignore_pass

    @property
    def ignore_comp(self) -> List[str]:
        """Gets the ignore_comp of this ModelDefinition.


        :return: The ignore_comp of this ModelDefinition.
        :rtype: List[str]
        """
        return self._ignore_comp

    @ignore_comp.setter
    def ignore_comp(self, ignore_comp: List[str]):
        """Sets the ignore_comp of this ModelDefinition.


        :param ignore_comp: The ignore_comp of this ModelDefinition.
        :type ignore_comp: List[str]
        """

        self._ignore_comp = ignore_comp
