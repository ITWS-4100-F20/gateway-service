# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class CompensationRecord(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, comp_id: int=None, vol_id: int=None, comp_type: str=None, comp_amount: int=None):  # noqa: E501
        """CompensationRecord - a model defined in Swagger

        :param comp_id: The comp_id of this CompensationRecord.  # noqa: E501
        :type comp_id: int
        :param vol_id: The vol_id of this CompensationRecord.  # noqa: E501
        :type vol_id: int
        :param comp_type: The comp_type of this CompensationRecord.  # noqa: E501
        :type comp_type: str
        :param comp_amount: The comp_amount of this CompensationRecord.  # noqa: E501
        :type comp_amount: int
        """
        self.swagger_types = {
            'comp_id': int,
            'vol_id': int,
            'comp_type': str,
            'comp_amount': int
        }

        self.attribute_map = {
            'comp_id': 'comp_id',
            'vol_id': 'vol_id',
            'comp_type': 'comp_type',
            'comp_amount': 'comp_amount'
        }
        self._comp_id = comp_id
        self._vol_id = vol_id
        self._comp_type = comp_type
        self._comp_amount = comp_amount

    @classmethod
    def from_dict(cls, dikt) -> 'CompensationRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CompensationRecord of this CompensationRecord.  # noqa: E501
        :rtype: CompensationRecord
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comp_id(self) -> int:
        """Gets the comp_id of this CompensationRecord.


        :return: The comp_id of this CompensationRecord.
        :rtype: int
        """
        return self._comp_id

    @comp_id.setter
    def comp_id(self, comp_id: int):
        """Sets the comp_id of this CompensationRecord.


        :param comp_id: The comp_id of this CompensationRecord.
        :type comp_id: int
        """

        self._comp_id = comp_id

    @property
    def vol_id(self) -> int:
        """Gets the vol_id of this CompensationRecord.


        :return: The vol_id of this CompensationRecord.
        :rtype: int
        """
        return self._vol_id

    @vol_id.setter
    def vol_id(self, vol_id: int):
        """Sets the vol_id of this CompensationRecord.


        :param vol_id: The vol_id of this CompensationRecord.
        :type vol_id: int
        """

        self._vol_id = vol_id

    @property
    def comp_type(self) -> str:
        """Gets the comp_type of this CompensationRecord.


        :return: The comp_type of this CompensationRecord.
        :rtype: str
        """
        return self._comp_type

    @comp_type.setter
    def comp_type(self, comp_type: str):
        """Sets the comp_type of this CompensationRecord.


        :param comp_type: The comp_type of this CompensationRecord.
        :type comp_type: str
        """

        self._comp_type = comp_type

    @property
    def comp_amount(self) -> int:
        """Gets the comp_amount of this CompensationRecord.


        :return: The comp_amount of this CompensationRecord.
        :rtype: int
        """
        return self._comp_amount

    @comp_amount.setter
    def comp_amount(self, comp_amount: int):
        """Sets the comp_amount of this CompensationRecord.


        :param comp_amount: The comp_amount of this CompensationRecord.
        :type comp_amount: int
        """

        self._comp_amount = comp_amount
