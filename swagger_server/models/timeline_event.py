# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TimelineEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, time: str=None, event_type: str=None, details: object=None):  # noqa: E501
        """TimelineEvent - a model defined in Swagger

        :param timestamp: The timestamp of this TimelineEvent.  # noqa: E501
        :type timestamp: str
        :param event_type: The event_type of this TimelineEvent.  # noqa: E501
        :type event_type: str
        :param details: The details of this TimelineEvent.  # noqa: E501
        :type details: object
        """
        self.swagger_types = {
            'time': str,
            'event_type': str,
            'details': object
        }

        self.attribute_map = {
            'time': 'time',
            'event_type': 'event_type',
            'details': 'details'
        }
        self._time = time
        self._event_type = event_type
        self._details = details

    @classmethod
    def from_dict(cls, dikt) -> 'TimelineEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TimelineEvent of this TimelineEvent.  # noqa: E501
        :rtype: TimelineEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this TimelineEvent.


        :return: The timestamp of this TimelineEvent.
        :rtype: str
        """
        return self._time

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this TimelineEvent.


        :param timestamp: The timestamp of this TimelineEvent.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def event_type(self) -> str:
        """Gets the event_type of this TimelineEvent.


        :return: The event_type of this TimelineEvent.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: str):
        """Sets the event_type of this TimelineEvent.


        :param event_type: The event_type of this TimelineEvent.
        :type event_type: str
        """
        if event_type is None:
            raise ValueError("Invalid value for `event_type`, must not be `None`")  # noqa: E501

        self._event_type = event_type

    @property
    def details(self) -> object:
        """Gets the details of this TimelineEvent.


        :return: The details of this TimelineEvent.
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details: object):
        """Sets the details of this TimelineEvent.


        :param details: The details of this TimelineEvent.
        :type details: object
        """

        self._details = details
