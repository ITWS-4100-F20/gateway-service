# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class BidEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, bid_id: int=None, vol_id: int=None, vol_name: str=None, timestamp: str=None, etc_comp: int=None, miles_comp: int=None, initiated_by: str=None, accepted: bool=None):  # noqa: E501
        """BidEvent - a model defined in Swagger

        :param bid_id: The bid_id of this BidEvent.  # noqa: E501
        :type bid_id: int
        :param vol_id: The vol_id of this BidEvent.  # noqa: E501
        :type vol_id: int
        :param vol_name: The vol_name of this BidEvent.  # noqa: E501
        :type vol_name: str
        :param timestamp: The timestamp of this BidEvent.  # noqa: E501
        :type timestamp: str
        :param etc_comp: The etc_comp of this BidEvent.  # noqa: E501
        :type etc_comp: int
        :param miles_comp: The miles_comp of this BidEvent.  # noqa: E501
        :type miles_comp: int
        :param initiated_by: The initiated_by of this BidEvent.  # noqa: E501
        :type initiated_by: str
        :param accepted: The accepted of this BidEvent.  # noqa: E501
        :type accepted: bool
        """
        self.swagger_types = {
            'bid_id': int,
            'vol_id': int,
            'vol_name': str,
            'timestamp': str,
            'etc_comp': int,
            'miles_comp': int,
            'initiated_by': str,
            'accepted': bool
        }

        self.attribute_map = {
            'bid_id': 'bid_id',
            'vol_id': 'vol_id',
            'vol_name': 'vol_name',
            'timestamp': 'timestamp',
            'etc_comp': 'etc_comp',
            'miles_comp': 'miles_comp',
            'initiated_by': 'initiated_by',
            'accepted': 'accepted'
        }
        self._bid_id = bid_id
        self._vol_id = vol_id
        self._vol_name = vol_name
        self._timestamp = timestamp
        self._etc_comp = etc_comp
        self._miles_comp = miles_comp
        self._initiated_by = initiated_by
        self._accepted = accepted

    @classmethod
    def from_dict(cls, dikt) -> 'BidEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BidEvent of this BidEvent.  # noqa: E501
        :rtype: BidEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bid_id(self) -> int:
        """Gets the bid_id of this BidEvent.


        :return: The bid_id of this BidEvent.
        :rtype: int
        """
        return self._bid_id

    @bid_id.setter
    def bid_id(self, bid_id: int):
        """Sets the bid_id of this BidEvent.


        :param bid_id: The bid_id of this BidEvent.
        :type bid_id: int
        """

        self._bid_id = bid_id

    @property
    def vol_id(self) -> int:
        """Gets the vol_id of this BidEvent.


        :return: The vol_id of this BidEvent.
        :rtype: int
        """
        return self._vol_id

    @vol_id.setter
    def vol_id(self, vol_id: int):
        """Sets the vol_id of this BidEvent.


        :param vol_id: The vol_id of this BidEvent.
        :type vol_id: int
        """

        self._vol_id = vol_id

    @property
    def vol_name(self) -> str:
        """Gets the vol_name of this BidEvent.


        :return: The vol_name of this BidEvent.
        :rtype: str
        """
        return self._vol_name

    @vol_name.setter
    def vol_name(self, vol_name: str):
        """Sets the vol_name of this BidEvent.


        :param vol_name: The vol_name of this BidEvent.
        :type vol_name: str
        """

        self._vol_name = vol_name

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this BidEvent.


        :return: The timestamp of this BidEvent.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this BidEvent.


        :param timestamp: The timestamp of this BidEvent.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def etc_comp(self) -> int:
        """Gets the etc_comp of this BidEvent.


        :return: The etc_comp of this BidEvent.
        :rtype: int
        """
        return self._etc_comp

    @etc_comp.setter
    def etc_comp(self, etc_comp: int):
        """Sets the etc_comp of this BidEvent.


        :param etc_comp: The etc_comp of this BidEvent.
        :type etc_comp: int
        """

        self._etc_comp = etc_comp

    @property
    def miles_comp(self) -> int:
        """Gets the miles_comp of this BidEvent.


        :return: The miles_comp of this BidEvent.
        :rtype: int
        """
        return self._miles_comp

    @miles_comp.setter
    def miles_comp(self, miles_comp: int):
        """Sets the miles_comp of this BidEvent.


        :param miles_comp: The miles_comp of this BidEvent.
        :type miles_comp: int
        """

        self._miles_comp = miles_comp

    @property
    def initiated_by(self) -> str:
        """Gets the initiated_by of this BidEvent.


        :return: The initiated_by of this BidEvent.
        :rtype: str
        """
        return self._initiated_by

    @initiated_by.setter
    def initiated_by(self, initiated_by: str):
        """Sets the initiated_by of this BidEvent.


        :param initiated_by: The initiated_by of this BidEvent.
        :type initiated_by: str
        """
        allowed_values = ["USER", "AGENT"]  # noqa: E501
        if initiated_by not in allowed_values:
            raise ValueError(
                "Invalid value for `initiated_by` ({0}), must be one of {1}"
                .format(initiated_by, allowed_values)
            )

        self._initiated_by = initiated_by

    @property
    def accepted(self) -> bool:
        """Gets the accepted of this BidEvent.


        :return: The accepted of this BidEvent.
        :rtype: bool
        """
        return self._accepted

    @accepted.setter
    def accepted(self, accepted: bool):
        """Sets the accepted of this BidEvent.


        :param accepted: The accepted of this BidEvent.
        :type accepted: bool
        """

        self._accepted = accepted
